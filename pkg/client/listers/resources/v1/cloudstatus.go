/*
Copyright 2018 All rights reserved - Appvia.io

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/gambol99/resources/pkg/apis/resources/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudStatusLister helps list CloudStatuses.
type CloudStatusLister interface {
	// List lists all CloudStatuses in the indexer.
	List(selector labels.Selector) (ret []*v1.CloudStatus, err error)
	// CloudStatuses returns an object that can list and get CloudStatuses.
	CloudStatuses(namespace string) CloudStatusNamespaceLister
	CloudStatusListerExpansion
}

// cloudStatusLister implements the CloudStatusLister interface.
type cloudStatusLister struct {
	indexer cache.Indexer
}

// NewCloudStatusLister returns a new CloudStatusLister.
func NewCloudStatusLister(indexer cache.Indexer) CloudStatusLister {
	return &cloudStatusLister{indexer: indexer}
}

// List lists all CloudStatuses in the indexer.
func (s *cloudStatusLister) List(selector labels.Selector) (ret []*v1.CloudStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CloudStatus))
	})
	return ret, err
}

// CloudStatuses returns an object that can list and get CloudStatuses.
func (s *cloudStatusLister) CloudStatuses(namespace string) CloudStatusNamespaceLister {
	return cloudStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudStatusNamespaceLister helps list and get CloudStatuses.
type CloudStatusNamespaceLister interface {
	// List lists all CloudStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CloudStatus, err error)
	// Get retrieves the CloudStatus from the indexer for a given namespace and name.
	Get(name string) (*v1.CloudStatus, error)
	CloudStatusNamespaceListerExpansion
}

// cloudStatusNamespaceLister implements the CloudStatusNamespaceLister
// interface.
type cloudStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudStatuses in the indexer for a given namespace.
func (s cloudStatusNamespaceLister) List(selector labels.Selector) (ret []*v1.CloudStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CloudStatus))
	})
	return ret, err
}

// Get retrieves the CloudStatus from the indexer for a given namespace and name.
func (s cloudStatusNamespaceLister) Get(name string) (*v1.CloudStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cloudstatus"), name)
	}
	return obj.(*v1.CloudStatus), nil
}
